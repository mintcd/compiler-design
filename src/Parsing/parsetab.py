
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATEleftLTGTLEGEEQUALNOT_EQUALleftORANDleftADDSUBleftMULDIVMODrightNOTrightSUBADD AND ARRAY ASSIGN AUTO BOOLEAN BOOLEANLIT BREAK CL CM CONCATE CONTINUE DIV DO DOT ELSE EQUAL FLOAT FLOATLIT FOR FUNCTION GE GT ID IF INHERIT INTEGER INTLIT LB LE LP LSB LT MOD MUL NOT NOT_EQUAL OF OR OUT RB RETURN RP RSB SM STRING STRINGLIT SUB VOID WHILE\n        program : declprime\n        \n        declprime : decl declprime\n                | decl\n        \n        decl : vardecl\n            | funcdecl\n        \n        vardecl : idprime CL returnabletype SM\n                | idprime CL returnabletype ASSIGN exprprime SM\n        \n            funcdecl : ID CL FUNCTION typ LP paramlist RP INHERIT ID blockstmt\n                    | ID CL FUNCTION typ LP paramlist RP blockstmt\n         paramdecl : INHERIT OUT ID CL returnabletype\n                        | OUT ID CL returnabletype\n                        | INHERIT ID CL returnabletype\n                        | ID CL returnabletype\n         expr : expr CONCATE expr\n                | expr LT expr\n                | expr GT expr\n                | expr LE expr\n                | expr GE expr\n                | expr EQUAL expr\n                | expr NOT_EQUAL expr\n                | expr OR expr\n                | expr AND expr\n                | expr ADD expr\n                | expr SUB expr\n                | expr MUL expr\n                | expr DIV expr\n                | expr MOD expr\n\n                | NOT expr\n                | SUB expr\n\n                | arraylit\n                | arraycell\n                | LP expr RP\n                | funccall\n\n                | INTLIT\n                | FLOATLIT\n                | BOOLEANLIT\n                | STRINGLIT\n                | ID\n        arraylit : LB exprlist RBarraycell : ID LSB exprprime RSB funccall : ID LP exprlist RP\n            stmt : assignstmt\n                | ifstmt\n                | forstmt\n                | whilestmt\n                | dowhilestmt\n                | breakstmt\n                | continuestmt\n                | returnstmt\n                | callstmt\n                | blockstmt\n        \n            assignstmt : lhs ASSIGN expr SM\n         \n            ifstmt : IF LP expr RP stmt \n                    | IF LP expr RP stmt elsestmt\n        elsestmt : ELSE stmt forstmt : FOR LP lhs ASSIGN expr CM expr CM expr RP stmtwhilestmt : WHILE LP expr RP stmtdowhilestmt : DO blockstmt WHILE LP expr RP SMblockstmt : LB stmtlist RBcallstmt : ID LP exprlist RP SMbreakstmt : BREAK SMcontinuestmt : CONTINUE SMreturnstmt : RETURN expr SM \n                    | RETURN SM typ : returnabletype\n                | VOID\n        returnabletype : array \n                        | atomictype \n                        | AUTO\n        array : ARRAY LSB intprime RSB OF atomictypeatomictype : BOOLEAN \n                    | INTEGER \n                    | FLOAT \n                    | STRING\n        \n        exprlist : exprprime\n                |\n        \n        exprprime : expr CM exprprime\n                | expr\n        \n        paramlist : paramprime \n                    |\n         paramprime : paramdecl CM paramprime \n                    | paramdecl \n        stmtlist : stmt stmtlist \n                | vardecl stmtlist\n                |\n        \n            intprime : INTLIT CM intprime \n                    | INTLIT\n         idprime : ID CM idprime \n                    | ID\n        \n            lhs : ID \n                | arraycell\n        '
    
_lr_action_items = {'ID':([0,3,4,5,11,24,25,32,33,36,43,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,67,74,77,101,103,109,110,111,118,119,120,121,122,123,124,125,126,127,128,129,137,143,144,147,148,149,150,152,153,155,156,164,166,167,168,169,170,172,175,177,178,179,180,182,184,185,187,188,],[7,7,-4,-5,22,-6,42,42,42,42,42,72,-7,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,102,104,112,72,116,-9,138,138,138,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,42,-8,-59,42,42,161,42,-61,-62,-64,42,-63,-52,173,42,173,42,-53,-57,-60,-54,173,42,-55,-58,42,173,-56,]),'$end':([1,2,3,4,5,8,24,47,110,143,144,],[0,-1,-3,-4,-5,-2,-6,-7,-9,-8,-59,]),'CL':([6,7,22,23,72,102,104,112,138,],[9,10,-89,-88,99,113,115,140,-89,]),'CM':([7,13,14,15,17,18,19,20,22,31,34,35,37,38,39,40,41,42,45,63,64,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,105,106,107,108,138,141,142,157,174,183,],[11,-67,-68,-69,-71,-72,-73,-74,11,48,-30,-31,-33,-34,-35,-36,-37,-38,71,-29,-28,103,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-32,-39,-40,-41,-70,-13,11,-12,-11,-10,180,185,]),'AUTO':([9,21,99,113,115,140,],[15,15,15,15,15,15,]),'ARRAY':([9,21,99,113,115,140,],[16,16,16,16,16,16,]),'BOOLEAN':([9,21,97,99,113,115,140,],[17,17,17,17,17,17,17,]),'INTEGER':([9,21,97,99,113,115,140,],[18,18,18,18,18,18,18,]),'FLOAT':([9,21,97,99,113,115,140,],[19,19,19,19,19,19,19,]),'STRING':([9,21,97,99,113,115,140,],[20,20,20,20,20,20,20,]),'FUNCTION':([10,],[21,]),'SM':([12,13,14,15,17,18,19,20,30,31,34,35,37,38,39,40,41,42,63,64,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,105,106,107,135,136,137,154,158,171,181,],[24,-67,-68,-69,-71,-72,-73,-74,47,-78,-30,-31,-33,-34,-35,-36,-37,-38,-29,-28,-77,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-32,-39,-40,-41,-70,152,153,155,164,166,177,184,]),'ASSIGN':([12,13,14,15,17,18,19,20,105,107,130,138,139,160,161,173,],[25,-67,-68,-69,-71,-72,-73,-74,-40,-70,147,-90,-91,168,-90,-90,]),'LP':([13,14,15,17,18,19,20,25,27,28,29,32,33,36,42,43,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,67,107,131,132,133,137,138,147,148,150,156,163,168,170,173,180,185,],[-67,-68,-69,-71,-72,-73,-74,36,46,-65,-66,36,36,36,67,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-70,148,149,150,36,156,36,36,36,36,170,36,36,156,36,36,]),'RP':([13,14,15,17,18,19,20,31,34,35,37,38,39,40,41,42,46,63,64,65,67,69,73,75,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,105,106,107,108,114,141,142,156,157,159,162,165,176,186,],[-67,-68,-69,-71,-72,-73,-74,-78,-30,-31,-33,-34,-35,-36,-37,-38,-80,-29,-28,93,-76,-75,100,-79,-82,-77,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-32,106,-39,-40,-41,-70,-13,-81,-12,-11,-76,-10,167,169,171,181,187,]),'LSB':([16,42,138,161,173,],[26,66,66,66,66,]),'VOID':([21,],[29,]),'IF':([24,47,111,118,119,120,121,122,123,124,125,126,127,128,129,144,152,153,155,164,166,167,169,172,175,177,178,179,182,184,187,188,],[-6,-7,131,131,131,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-59,-61,-62,-64,-63,-52,131,131,-53,-57,-60,-54,131,-55,-58,131,-56,]),'FOR':([24,47,111,118,119,120,121,122,123,124,125,126,127,128,129,144,152,153,155,164,166,167,169,172,175,177,178,179,182,184,187,188,],[-6,-7,132,132,132,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-59,-61,-62,-64,-63,-52,132,132,-53,-57,-60,-54,132,-55,-58,132,-56,]),'WHILE':([24,47,111,118,119,120,121,122,123,124,125,126,127,128,129,144,151,152,153,155,164,166,167,169,172,175,177,178,179,182,184,187,188,],[-6,-7,133,133,133,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-59,163,-61,-62,-64,-63,-52,133,133,-53,-57,-60,-54,133,-55,-58,133,-56,]),'DO':([24,47,111,118,119,120,121,122,123,124,125,126,127,128,129,144,152,153,155,164,166,167,169,172,175,177,178,179,182,184,187,188,],[-6,-7,134,134,134,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-59,-61,-62,-64,-63,-52,134,134,-53,-57,-60,-54,134,-55,-58,134,-56,]),'BREAK':([24,47,111,118,119,120,121,122,123,124,125,126,127,128,129,144,152,153,155,164,166,167,169,172,175,177,178,179,182,184,187,188,],[-6,-7,135,135,135,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-59,-61,-62,-64,-63,-52,135,135,-53,-57,-60,-54,135,-55,-58,135,-56,]),'CONTINUE':([24,47,111,118,119,120,121,122,123,124,125,126,127,128,129,144,152,153,155,164,166,167,169,172,175,177,178,179,182,184,187,188,],[-6,-7,136,136,136,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-59,-61,-62,-64,-63,-52,136,136,-53,-57,-60,-54,136,-55,-58,136,-56,]),'RETURN':([24,47,111,118,119,120,121,122,123,124,125,126,127,128,129,144,152,153,155,164,166,167,169,172,175,177,178,179,182,184,187,188,],[-6,-7,137,137,137,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-59,-61,-62,-64,-63,-52,137,137,-53,-57,-60,-54,137,-55,-58,137,-56,]),'LB':([24,25,32,33,36,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,67,100,111,116,118,119,120,121,122,123,124,125,126,127,128,129,134,137,144,147,148,150,152,153,155,156,164,166,167,168,169,170,172,175,177,178,179,180,182,184,185,187,188,],[-6,43,43,43,43,43,-7,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,111,111,111,111,111,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,111,43,-59,43,43,43,-61,-62,-64,43,-63,-52,111,43,111,43,-53,-57,-60,-54,111,43,-55,-58,43,111,-56,]),'RB':([24,31,34,35,37,38,39,40,41,42,43,47,63,64,68,69,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,105,106,111,117,118,119,120,121,122,123,124,125,126,127,128,129,144,145,146,152,153,155,164,166,172,175,177,178,182,184,188,],[-6,-78,-30,-31,-33,-34,-35,-36,-37,-38,-76,-7,-29,-28,96,-75,-77,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-32,-39,-40,-41,-85,144,-85,-85,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-59,-83,-84,-61,-62,-64,-63,-52,-53,-57,-60,-54,-55,-58,-56,]),'NOT':([25,32,33,36,43,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,67,137,147,148,150,156,168,170,180,185,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'SUB':([25,31,32,33,34,35,36,37,38,39,40,41,42,43,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,105,106,137,147,148,150,154,156,158,159,162,168,170,174,176,180,183,185,186,],[32,59,32,32,-30,-31,32,-33,-34,-35,-36,-37,-38,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-29,-28,59,32,32,59,59,59,59,59,59,59,59,59,-23,-24,-25,-26,-27,-32,-39,-40,-41,32,32,32,32,59,32,59,59,59,32,32,59,59,32,59,32,59,]),'INTLIT':([25,26,32,33,36,43,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,67,71,137,147,148,150,156,168,170,180,185,],[38,45,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,45,38,38,38,38,38,38,38,38,38,]),'FLOATLIT':([25,32,33,36,43,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,67,137,147,148,150,156,168,170,180,185,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'BOOLEANLIT':([25,32,33,36,43,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,67,137,147,148,150,156,168,170,180,185,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'STRINGLIT':([25,32,33,36,43,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,67,137,147,148,150,156,168,170,180,185,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'RSB':([31,34,35,37,38,39,40,41,42,44,45,63,64,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,98,105,106,],[-78,-30,-31,-33,-34,-35,-36,-37,-38,70,-87,-29,-28,-77,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-32,105,-39,-86,-40,-41,]),'CONCATE':([31,34,35,37,38,39,40,41,42,63,64,65,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,105,106,154,158,159,162,174,176,183,186,],[49,-30,-31,-33,-34,-35,-36,-37,-38,-29,-28,49,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-32,-39,-40,-41,49,49,49,49,49,49,49,49,]),'LT':([31,34,35,37,38,39,40,41,42,63,64,65,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,105,106,154,158,159,162,174,176,183,186,],[50,-30,-31,-33,-34,-35,-36,-37,-38,-29,-28,50,50,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-32,-39,-40,-41,50,50,50,50,50,50,50,50,]),'GT':([31,34,35,37,38,39,40,41,42,63,64,65,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,105,106,154,158,159,162,174,176,183,186,],[51,-30,-31,-33,-34,-35,-36,-37,-38,-29,-28,51,51,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-32,-39,-40,-41,51,51,51,51,51,51,51,51,]),'LE':([31,34,35,37,38,39,40,41,42,63,64,65,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,105,106,154,158,159,162,174,176,183,186,],[52,-30,-31,-33,-34,-35,-36,-37,-38,-29,-28,52,52,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-32,-39,-40,-41,52,52,52,52,52,52,52,52,]),'GE':([31,34,35,37,38,39,40,41,42,63,64,65,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,105,106,154,158,159,162,174,176,183,186,],[53,-30,-31,-33,-34,-35,-36,-37,-38,-29,-28,53,53,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-32,-39,-40,-41,53,53,53,53,53,53,53,53,]),'EQUAL':([31,34,35,37,38,39,40,41,42,63,64,65,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,105,106,154,158,159,162,174,176,183,186,],[54,-30,-31,-33,-34,-35,-36,-37,-38,-29,-28,54,54,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-32,-39,-40,-41,54,54,54,54,54,54,54,54,]),'NOT_EQUAL':([31,34,35,37,38,39,40,41,42,63,64,65,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,105,106,154,158,159,162,174,176,183,186,],[55,-30,-31,-33,-34,-35,-36,-37,-38,-29,-28,55,55,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-32,-39,-40,-41,55,55,55,55,55,55,55,55,]),'OR':([31,34,35,37,38,39,40,41,42,63,64,65,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,105,106,154,158,159,162,174,176,183,186,],[56,-30,-31,-33,-34,-35,-36,-37,-38,-29,-28,56,56,56,56,56,56,56,56,-21,-22,-23,-24,-25,-26,-27,-32,-39,-40,-41,56,56,56,56,56,56,56,56,]),'AND':([31,34,35,37,38,39,40,41,42,63,64,65,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,105,106,154,158,159,162,174,176,183,186,],[57,-30,-31,-33,-34,-35,-36,-37,-38,-29,-28,57,57,57,57,57,57,57,57,-21,-22,-23,-24,-25,-26,-27,-32,-39,-40,-41,57,57,57,57,57,57,57,57,]),'ADD':([31,34,35,37,38,39,40,41,42,63,64,65,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,105,106,154,158,159,162,174,176,183,186,],[58,-30,-31,-33,-34,-35,-36,-37,-38,-29,-28,58,58,58,58,58,58,58,58,58,58,-23,-24,-25,-26,-27,-32,-39,-40,-41,58,58,58,58,58,58,58,58,]),'MUL':([31,34,35,37,38,39,40,41,42,63,64,65,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,105,106,154,158,159,162,174,176,183,186,],[60,-30,-31,-33,-34,-35,-36,-37,-38,60,-28,60,60,60,60,60,60,60,60,60,60,60,60,-25,-26,-27,-32,-39,-40,-41,60,60,60,60,60,60,60,60,]),'DIV':([31,34,35,37,38,39,40,41,42,63,64,65,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,105,106,154,158,159,162,174,176,183,186,],[61,-30,-31,-33,-34,-35,-36,-37,-38,61,-28,61,61,61,61,61,61,61,61,61,61,61,61,-25,-26,-27,-32,-39,-40,-41,61,61,61,61,61,61,61,61,]),'MOD':([31,34,35,37,38,39,40,41,42,63,64,65,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,105,106,154,158,159,162,174,176,183,186,],[62,-30,-31,-33,-34,-35,-36,-37,-38,62,-28,62,62,62,62,62,62,62,62,62,62,62,62,-25,-26,-27,-32,-39,-40,-41,62,62,62,62,62,62,62,62,]),'INHERIT':([46,100,103,],[74,109,74,]),'OUT':([46,74,103,],[77,101,77,]),'OF':([70,],[97,]),'ELSE':([120,121,122,123,124,125,126,127,128,129,144,152,153,155,164,166,172,175,177,178,182,184,188,],[-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-59,-61,-62,-64,-63,-52,179,-57,-60,-54,-55,-58,-56,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declprime':([0,3,],[2,8,]),'decl':([0,3,],[3,3,]),'vardecl':([0,3,111,118,119,],[4,4,119,119,119,]),'funcdecl':([0,3,],[5,5,]),'idprime':([0,3,11,111,118,119,],[6,6,23,6,6,6,]),'returnabletype':([9,21,99,113,115,140,],[12,28,108,141,142,157,]),'array':([9,21,99,113,115,140,],[13,13,13,13,13,13,]),'atomictype':([9,21,97,99,113,115,140,],[14,14,107,14,14,14,14,]),'typ':([21,],[27,]),'exprprime':([25,43,48,66,67,156,],[30,69,78,94,69,69,]),'expr':([25,32,33,36,43,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,67,137,147,148,150,156,168,170,180,185,],[31,63,64,65,31,31,79,80,81,82,83,84,85,86,87,88,89,90,91,92,31,31,154,158,159,162,31,174,176,183,186,]),'arraylit':([25,32,33,36,43,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,67,137,147,148,150,156,168,170,180,185,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'arraycell':([25,32,33,36,43,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,67,111,118,119,137,147,148,149,150,156,167,168,169,170,179,180,185,187,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,139,139,139,35,35,35,139,35,35,139,35,139,35,139,35,35,139,]),'funccall':([25,32,33,36,43,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,67,137,147,148,150,156,168,170,180,185,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'intprime':([26,71,],[44,98,]),'exprlist':([43,67,156,],[68,95,165,]),'paramlist':([46,],[73,]),'paramprime':([46,103,],[75,114,]),'paramdecl':([46,103,],[76,76,]),'blockstmt':([100,111,116,118,119,134,167,169,179,187,],[110,129,143,129,129,151,129,129,129,129,]),'stmtlist':([111,118,119,],[117,145,146,]),'stmt':([111,118,119,167,169,179,187,],[118,118,118,172,175,182,188,]),'assignstmt':([111,118,119,167,169,179,187,],[120,120,120,120,120,120,120,]),'ifstmt':([111,118,119,167,169,179,187,],[121,121,121,121,121,121,121,]),'forstmt':([111,118,119,167,169,179,187,],[122,122,122,122,122,122,122,]),'whilestmt':([111,118,119,167,169,179,187,],[123,123,123,123,123,123,123,]),'dowhilestmt':([111,118,119,167,169,179,187,],[124,124,124,124,124,124,124,]),'breakstmt':([111,118,119,167,169,179,187,],[125,125,125,125,125,125,125,]),'continuestmt':([111,118,119,167,169,179,187,],[126,126,126,126,126,126,126,]),'returnstmt':([111,118,119,167,169,179,187,],[127,127,127,127,127,127,127,]),'callstmt':([111,118,119,167,169,179,187,],[128,128,128,128,128,128,128,]),'lhs':([111,118,119,149,167,169,179,187,],[130,130,130,160,130,130,130,130,]),'elsestmt':([172,],[178,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declprime','program',1,'p_program','parser.py',24),
  ('declprime -> decl declprime','declprime',2,'p_declprime','parser.py',30),
  ('declprime -> decl','declprime',1,'p_declprime','parser.py',31),
  ('decl -> vardecl','decl',1,'p_decl','parser.py',47),
  ('decl -> funcdecl','decl',1,'p_decl','parser.py',48),
  ('vardecl -> idprime CL returnabletype SM','vardecl',4,'p_vardecl','parser.py',54),
  ('vardecl -> idprime CL returnabletype ASSIGN exprprime SM','vardecl',6,'p_vardecl','parser.py',55),
  ('funcdecl -> ID CL FUNCTION typ LP paramlist RP INHERIT ID blockstmt','funcdecl',10,'p_funcdecl','parser.py',69),
  ('funcdecl -> ID CL FUNCTION typ LP paramlist RP blockstmt','funcdecl',8,'p_funcdecl','parser.py',70),
  ('paramdecl -> INHERIT OUT ID CL returnabletype','paramdecl',5,'p_paramdecl','parser.py',80),
  ('paramdecl -> OUT ID CL returnabletype','paramdecl',4,'p_paramdecl','parser.py',81),
  ('paramdecl -> INHERIT ID CL returnabletype','paramdecl',4,'p_paramdecl','parser.py',82),
  ('paramdecl -> ID CL returnabletype','paramdecl',3,'p_paramdecl','parser.py',83),
  ('expr -> expr CONCATE expr','expr',3,'p_expr','parser.py',96),
  ('expr -> expr LT expr','expr',3,'p_expr','parser.py',97),
  ('expr -> expr GT expr','expr',3,'p_expr','parser.py',98),
  ('expr -> expr LE expr','expr',3,'p_expr','parser.py',99),
  ('expr -> expr GE expr','expr',3,'p_expr','parser.py',100),
  ('expr -> expr EQUAL expr','expr',3,'p_expr','parser.py',101),
  ('expr -> expr NOT_EQUAL expr','expr',3,'p_expr','parser.py',102),
  ('expr -> expr OR expr','expr',3,'p_expr','parser.py',103),
  ('expr -> expr AND expr','expr',3,'p_expr','parser.py',104),
  ('expr -> expr ADD expr','expr',3,'p_expr','parser.py',105),
  ('expr -> expr SUB expr','expr',3,'p_expr','parser.py',106),
  ('expr -> expr MUL expr','expr',3,'p_expr','parser.py',107),
  ('expr -> expr DIV expr','expr',3,'p_expr','parser.py',108),
  ('expr -> expr MOD expr','expr',3,'p_expr','parser.py',109),
  ('expr -> NOT expr','expr',2,'p_expr','parser.py',111),
  ('expr -> SUB expr','expr',2,'p_expr','parser.py',112),
  ('expr -> arraylit','expr',1,'p_expr','parser.py',114),
  ('expr -> arraycell','expr',1,'p_expr','parser.py',115),
  ('expr -> LP expr RP','expr',3,'p_expr','parser.py',116),
  ('expr -> funccall','expr',1,'p_expr','parser.py',117),
  ('expr -> INTLIT','expr',1,'p_expr','parser.py',119),
  ('expr -> FLOATLIT','expr',1,'p_expr','parser.py',120),
  ('expr -> BOOLEANLIT','expr',1,'p_expr','parser.py',121),
  ('expr -> STRINGLIT','expr',1,'p_expr','parser.py',122),
  ('expr -> ID','expr',1,'p_expr','parser.py',123),
  ('arraylit -> LB exprlist RB','arraylit',3,'p_arraylit','parser.py',148),
  ('arraycell -> ID LSB exprprime RSB','arraycell',4,'p_arraycell','parser.py',152),
  ('funccall -> ID LP exprlist RP','funccall',4,'p_funccall','parser.py',156),
  ('stmt -> assignstmt','stmt',1,'p_stmt','parser.py',163),
  ('stmt -> ifstmt','stmt',1,'p_stmt','parser.py',164),
  ('stmt -> forstmt','stmt',1,'p_stmt','parser.py',165),
  ('stmt -> whilestmt','stmt',1,'p_stmt','parser.py',166),
  ('stmt -> dowhilestmt','stmt',1,'p_stmt','parser.py',167),
  ('stmt -> breakstmt','stmt',1,'p_stmt','parser.py',168),
  ('stmt -> continuestmt','stmt',1,'p_stmt','parser.py',169),
  ('stmt -> returnstmt','stmt',1,'p_stmt','parser.py',170),
  ('stmt -> callstmt','stmt',1,'p_stmt','parser.py',171),
  ('stmt -> blockstmt','stmt',1,'p_stmt','parser.py',172),
  ('assignstmt -> lhs ASSIGN expr SM','assignstmt',4,'p_assignstmt','parser.py',178),
  ('ifstmt -> IF LP expr RP stmt','ifstmt',5,'p_ifstmt','parser.py',184),
  ('ifstmt -> IF LP expr RP stmt elsestmt','ifstmt',6,'p_ifstmt','parser.py',185),
  ('elsestmt -> ELSE stmt','elsestmt',2,'p_elsestmt','parser.py',192),
  ('forstmt -> FOR LP lhs ASSIGN expr CM expr CM expr RP stmt','forstmt',11,'p_forstmt','parser.py',196),
  ('whilestmt -> WHILE LP expr RP stmt','whilestmt',5,'p_whilestmt','parser.py',205),
  ('dowhilestmt -> DO blockstmt WHILE LP expr RP SM','dowhilestmt',7,'p_dowhilestmt','parser.py',209),
  ('blockstmt -> LB stmtlist RB','blockstmt',3,'p_blockstmt','parser.py',213),
  ('callstmt -> ID LP exprlist RP SM','callstmt',5,'p_callstmt','parser.py',217),
  ('breakstmt -> BREAK SM','breakstmt',2,'p_breakstmt','parser.py',221),
  ('continuestmt -> CONTINUE SM','continuestmt',2,'p_continuestmt','parser.py',225),
  ('returnstmt -> RETURN expr SM','returnstmt',3,'p_returnstmt','parser.py',229),
  ('returnstmt -> RETURN SM','returnstmt',2,'p_returnstmt','parser.py',230),
  ('typ -> returnabletype','typ',1,'p_typ','parser.py',238),
  ('typ -> VOID','typ',1,'p_typ','parser.py',239),
  ('returnabletype -> array','returnabletype',1,'p_returnabletype','parser.py',244),
  ('returnabletype -> atomictype','returnabletype',1,'p_returnabletype','parser.py',245),
  ('returnabletype -> AUTO','returnabletype',1,'p_returnabletype','parser.py',246),
  ('array -> ARRAY LSB intprime RSB OF atomictype','array',6,'p_array','parser.py',251),
  ('atomictype -> BOOLEAN','atomictype',1,'p_atomictype','parser.py',255),
  ('atomictype -> INTEGER','atomictype',1,'p_atomictype','parser.py',256),
  ('atomictype -> FLOAT','atomictype',1,'p_atomictype','parser.py',257),
  ('atomictype -> STRING','atomictype',1,'p_atomictype','parser.py',258),
  ('exprlist -> exprprime','exprlist',1,'p_exprlist','parser.py',272),
  ('exprlist -> <empty>','exprlist',0,'p_exprlist','parser.py',273),
  ('exprprime -> expr CM exprprime','exprprime',3,'p_exprprime','parser.py',282),
  ('exprprime -> expr','exprprime',1,'p_exprprime','parser.py',283),
  ('paramlist -> paramprime','paramlist',1,'p_paramlist','parser.py',292),
  ('paramlist -> <empty>','paramlist',0,'p_paramlist','parser.py',293),
  ('paramprime -> paramdecl CM paramprime','paramprime',3,'p_paramprime','parser.py',300),
  ('paramprime -> paramdecl','paramprime',1,'p_paramprime','parser.py',301),
  ('stmtlist -> stmt stmtlist','stmtlist',2,'p_stmtlist','parser.py',308),
  ('stmtlist -> vardecl stmtlist','stmtlist',2,'p_stmtlist','parser.py',309),
  ('stmtlist -> <empty>','stmtlist',0,'p_stmtlist','parser.py',310),
  ('intprime -> INTLIT CM intprime','intprime',3,'p_intprime','parser.py',322),
  ('intprime -> INTLIT','intprime',1,'p_intprime','parser.py',323),
  ('idprime -> ID CM idprime','idprime',3,'p_idprime','parser.py',331),
  ('idprime -> ID','idprime',1,'p_idprime','parser.py',332),
  ('lhs -> ID','lhs',1,'p_lhs','parser.py',341),
  ('lhs -> arraycell','lhs',1,'p_lhs','parser.py',342),
]
